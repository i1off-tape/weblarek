import "./scss/styles.scss";
import { CatalogManager } from "./components/Models/CatalogManager";
import { CartManager } from "./components/Models/CartManager";
import { BuyerManager } from "./components/Models/BuyerManager";
import { Api } from "./components/base/Api.ts";
import { ApiClient } from "./components/Models/ApiClient.ts";
import { API_URL, CDN_URL } from "./utils/constants";
import { apiProducts } from "./utils/data.ts";
import { Header } from "./components/View/Header.ts";
import { Gallery } from "./components/View/Gallery.ts";
import { CardCatalog } from "./components/View/CardCatalog.ts";
import { EventEmitter } from "./components/base/Events.ts";
import { ensureElement } from "./utils/utils";
import { Basket } from "./components/View/Basket.ts";
import { Modal } from "./components/View/Modal.ts";
import { OrderForm } from "./components/View/OrderForm.ts";
import { ContactsForm } from "./components/View/ContactsForm.ts";
import { Success } from "./components/View/Success.ts";
import { CardBasket } from "./components/View/CardBasket.ts";
import { CardPreview } from "./components/View/CardPreview.ts";
import { Form } from "./components/View/Form.ts";
import { IProduct, IBuyer, IOrderResponse, TPayment } from "./types/index.ts";

// –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –æ–±–µ—Ä–Ω—É—Ç—å –≤ DOMContentLoaded
document.addEventListener("DOMContentLoaded", () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
  const events = new EventEmitter();
  const api = new Api(API_URL);
  const apiClient = new ApiClient(api, events);

  const cartManager = new CartManager(events);
  const buyerManager = new BuyerManager(events);
  const catalogManager = new CatalogManager(events);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
  const modal = new Modal(ensureElement<HTMLElement>("#modal-container"));
  const gallery = new Gallery(ensureElement<HTMLElement>(".gallery"), events);
  const header = new Header(events, ensureElement<HTMLElement>(".header"));

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞—é—â–∏–µ—Å—è –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
  const basket = new Basket(events);
  const success = new Success(events);
  const orderForm = new OrderForm(events);
  const contactsForm = new ContactsForm(events);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  apiClient
    .getProducts()
    .then((data) => {
      console.log("‚úÖ Products loaded from API:", data.items.length); // –î–û–ë–ê–í–ò–¢–¨
      catalogManager.saveProductList(data.items);
    })
    .catch((error) => {
      console.error("‚ùå API Error:", error); // –î–û–ë–ê–í–ò–¢–¨
    });

  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô

  // –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ - –ü–û–õ–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  events.on("catalog:changed", (items: IProduct[]) => {
    console.log("üìã Catalog changed, rendering", items.length, "items");

    const cardCatalog = new CardCatalog(document.createElement("div"));
    const cards = items.map((item) => {
      const card = cardCatalog.render(item);
      console.log("üÉè Created card for:", item.title);

      // –ö–†–ò–¢–ò–ß–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –ö–ê–†–¢–û–ß–ö–£
      card.addEventListener("click", () => {
        console.log("üñ±Ô∏è Card clicked for ID:", item.id);
        events.emit("card:select", { id: item.id });
      });

      return card;
    });

    gallery.catalog = cards;
    console.log("üé® Gallery catalog updated, children:", gallery.itemsCount);
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
  events.on("catalog:productSelected", (product: IProduct) => {
    console.log("üé¨ Opening modal for product:", product.title);
    const cardPreview = new CardPreview(document.createElement("div"));
    const preview = cardPreview.render(product);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í –∫–æ—Ä–∑–∏–Ω—É"
    const addButton = preview.querySelector(".card__button");
    if (addButton) {
      addButton.addEventListener("click", () => {
        events.emit("card:addToBasket", { id: product.id });
        modal.close();
      });
    }

    modal.setContent(preview);
    modal.open();
  });

  // –ö–æ—Ä–∑–∏–Ω–∞
  events.on("cart:changed", (items: IProduct[]) => {
    header.counter = items.length;
    basket.items = items;
    basket.total = cartManager.getTotalPrice();
  });

  events.on("basket:open", () => {
    basket.items = cartManager.getProductsList();
    basket.total = cartManager.getTotalPrice();
    const basketElement = basket.render();
    modal.setContent(basketElement);
    modal.open();
  });

  events.on("basket:remove", (data: { id: string }) => {
    cartManager.removeProduct(data.id);
  });

  events.on("basket:checkout", () => {
    modal.setContent(
      orderForm.render({
        valid: false,
        errors: ["–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É"],
      })
    );
  });

  // –§–æ—Ä–º—ã
  events.on(
    "orderForm:submit",
    (data: { payment: TPayment; address: string }) => {
      buyerManager.saveBuyerData({
        ...buyerManager.getBuyerData(),
        payment: data.payment,
        address: data.address,
      });

      modal.setContent(
        contactsForm.render({
          valid: false,
          errors: ["–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"],
        })
      );
    }
  );

  events.on("contactsForm:submit", (data: { email: string; phone: string }) => {
    const buyerData = {
      ...buyerManager.getBuyerData(),
      email: data.email,
      phone: data.phone,
    };

    buyerManager.saveBuyerData(buyerData);

    if (buyerManager.validationData()) {
      apiClient.sendOrder(cartManager.getProductsList(), buyerData);
    }
  });

  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  events.on("success:close", () => {
    modal.close();
  });

  // –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
  events.on("card:select", (data: { id: string }) => {
    console.log("üî• card:select triggered with ID:", data.id); // –î–û–ë–ê–í–ò–¢–¨
    const product = catalogManager.getProductById(data.id);
    console.log("üì¶ Found product:", product); // –î–û–ë–ê–í–ò–¢–¨
    if (product) {
      events.emit("catalog:productSelected", product);
      console.log("üéØ Emitted catalog:productSelected"); // –î–û–ë–ê–í–ò–¢–¨
    } else {
      console.error(`Product with ID ${data.id} not found`);
    }
  });

  events.on("card:addToBasket", (data: { id: string }) => {
    const product = catalogManager.getProductById(data.id);
    if (product) {
      cartManager.addProduct(product);
    }
  });

  // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è events
  events.on("test", () => console.log("TEST EVENT WORKS!"));
  events.emit("test"); // –î–æ–ª–∂–µ–Ω –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
}); // –ö–æ–Ω–µ—Ü DOMContentLoaded
